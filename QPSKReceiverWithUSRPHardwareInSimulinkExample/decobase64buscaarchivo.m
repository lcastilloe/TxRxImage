clc; clear; close all;

disp('=== PROCESAMIENTO COMPLETO: SELECCI√ìN Y DECODIFICACI√ìN BASE64 ===');

%% === PARTE 1: Selecci√≥n de bloque v√°lido desde archivo ===

% === Par√°metros esperados ===
longitud_total = 82500;                   % 50 'a' + base64 + 50 'b'
prefijo = repmat('a', 1, 50);
sufijo  = repmat('b', 1, 50);
archivo_entrada = 'APruebaBase64_2.txt';   % Archivo a procesar

% === Leer archivo como una sola cadena ===
contenido = fileread(archivo_entrada);
total_caracteres = length(contenido);
fprintf('üìÑ Total de caracteres en el archivo: %d\n', total_caracteres);

% === Calcular n√∫mero de bloques posibles ===
num_bloques = floor(total_caracteres / longitud_total);
fprintf('üîç Se detectaron %d posibles bloques de %d caracteres.\n', num_bloques, longitud_total);

% === Buscar el primer bloque v√°lido ===
cadena_valida = '';
for i = 1:num_bloques
    inicio = (i - 1) * longitud_total + 1;
    fin = inicio + longitud_total - 1;
    bloque = contenido(inicio:fin);

    if startsWith(bloque, prefijo) && endsWith(bloque, sufijo)
        cadena_valida = bloque;
        fprintf('‚úÖ Bloque %d v√°lido encontrado.\n', i);
        break;
    else
        fprintf('‚ùå Bloque %d inv√°lido (no tiene 50 "a" y 50 "b").\n', i);
    end
end

% === Guardar bloque si fue encontrado ===
if isempty(cadena_valida)
    error('‚ö†Ô∏è No se encontr√≥ ning√∫n bloque v√°lido. Terminando ejecuci√≥n.');
else
    output_file = 'cadena_valida_extraida.txt';
    fid = fopen(output_file, 'w');
    fprintf(fid, '%s', cadena_valida);
    fclose(fid);
    fprintf('üìÅ Cadena v√°lida guardada en "%s"\n', output_file);
end

%% === PARTE 2: Decodificaci√≥n y reconstrucci√≥n de imagen ===

% === Configuraci√≥n de la imagen ===
rows = 103;         % Alto
cols = 200;         % Ancho
channels = 3;       % RGB
expected_length = 82400;

% === Leer bloque guardado ===
fid = fopen(output_file, 'r');
lines = textscan(fid, '%s', 'Delimiter', '\n');
fclose(fid);
cadena_completa = strjoin(lines{1}, '');
cadena_completa = char(cadena_completa);
disp(['üìñ Longitud le√≠da: ', num2str(strlength(cadena_completa))]);

% === Detecci√≥n de delimitadores ===
num_a = 0;
while num_a < min(1000, strlength(cadena_completa)) && cadena_completa(num_a+1) == 'a'
    num_a = num_a + 1;
end

num_b = 0;
while num_b < min(1000, strlength(cadena_completa)) && cadena_completa(end-num_b) == 'b'
    num_b = num_b + 1;
end

fprintf('üîç Detectados: %d "a" iniciales y %d "b" finales.\n', num_a, num_b);

% === Extraer base64 puro ===
if num_a > 0 || num_b > 0
    cadena_base64 = extractBetween(cadena_completa, num_a+1, strlength(cadena_completa)-num_b);
    cadena_base64 = char(cadena_base64);
else
    cadena_base64 = cadena_completa;
    disp('‚ö†Ô∏è No se detectaron delimitadores "a"/"b".');
end

% === Verificar longitud base64 ===
if strlength(cadena_base64) < expected_length
    ceros_necesarios = expected_length - strlength(cadena_base64);
    cadena_base64 = [repmat('0', 1, ceros_necesarios), cadena_base64];
    fprintf('üîß A√±adidos %d ceros al inicio.\n', ceros_necesarios);
elseif strlength(cadena_base64) > expected_length
    error('‚ùå La cadena Base64 excede el tama√±o esperado.');
end

% === Decodificaci√≥n Base64 ===
try
    img_decoded = matlab.net.base64decode(cadena_base64);
    disp('‚úÖ Decodificaci√≥n exitosa.');
catch ME
    error('‚ùå Error al decodificar: %s', ME.message);
end

% === Reconstrucci√≥n de imagen ===
try
    img_reconstructed = reshape(img_decoded, rows, cols, channels);
    fprintf('üñºÔ∏è Imagen reconstruida: %dx%dx%d\n', rows, cols, channels);
catch
    error('‚ùå Error al reconstruir la imagen. Verifica dimensiones.');
end

% === Visualizaci√≥n y guardado ===
figure;
imshow(img_reconstructed);
title(sprintf('Imagen Reconstruida (%dx%d RGB)', rows, cols));
imwrite(img_reconstructed, 'imagen_reconstruida.png');
disp('üíæ Imagen guardada como "imagen_reconstruida.png"');